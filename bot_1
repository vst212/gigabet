var change_mirror_true = false;
var change_mirror = ["stake.com", "stake.bet", "stake.games", "stake.kim"];
var style = "<style>\nbody {\n  background-color: #1a2c38;\n}\n#spacer {\n  font-size: 1px;\n  text-align: center;\n  border-bottom: solid #8f8f8f;\n}\n.boxDice {\n  margin: 0;\n  padding: 0;\n  font-family: 'Proxima Nova', 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  /* height: 100vh; */\n}\n.center-checkbox {\n  text-align: center;\n}\n.boxTitle {\n  text-align: center;\n  padding: 8px 8px 5px;\n  font-weight: 700;\n  border-bottom: solid#181a1e;\n}\n.boxScon {\n  text-align: center;\n  padding: 10px 8px 5px;\n  border-bottom: solid#181a1e;\n}\n.boxStatus {\n  padding: 5px 0;\n  background-color: #16151f;\n  width: 100%;\n  border: 0;\n  color: #fff;\n  text-transform: uppercase;\n  text-align: center;\n}\n.divTitle {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 1px;\n  color: #9aa8ce;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 700;\n}\n.divTitle1 {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 1px;\n  color: #9aa8ce;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 700;\n  margin-left: -20px;\n}\n.divTitle2 {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 1px;\n  color: #9aa8ce;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 700;\n  margin-left: -10px;\n}\n.boxButtons {\n  width: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 5px;\n  padding-left: 20px;\n  padding-right: 20px;\n  color: #9aa8ce;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 700;\n}\n.boxDS {\n  width: 110px;\n  padding: 3px;\n  text-align: center;\n}\n#refurl {\n  font-size: 18px !important;\n  color: #ff0 !important;\n}\n#_playtime {\n  font-size: 15px !important;\n  font-weight: 700;\n  text-align: center;\n  color: #fff !important;\n}\n#_start {\n\tfont-size: 16px;\n\tfont-weight: bold;\n  padding: 5px;\n  padding-right: 20px;\n  padding-left: 20px;\n}\n#_stopwin {\n\tfont-size: 16px;\n\tfont-weight: bold;\n  padding: 5px;\n  padding-right: 20px;\n  padding-left: 20px;\n}\n#_seed {\n\tfont-size: 16px;\n\tfont-weight: bold;\n  padding: 5px;\n  padding-right: 10px;\n  padding-left: 10px;\n}\n#_bot {\n\tfont-size: 16px;\n\tfont-weight: bold;\n  padding: 5px;\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.InputBox {\n  width: 110px;\n  padding: 0.1rem;\n  border-radius: 5px;\n  background: #0f212e;\n  color: #fff;\n  text-align: center;\n  font-size: 15px;\n  transition: 1s;\n}\n.InputBox1 {\n  width: 230px;\n  padding: 0.1rem;\n  border-radius: 5px;\n  background: #0f212e;\n  color: #fff;\n  text-align: center;\n  font-size: 15px;\n  transition: 1s;\n}\n#_status {\n  background: #16151f;\n  font-family: 'Proxima Nova', sans-serif;\n  line-height: 1em;\n  color: #01ff3f;\n  font-weight: 700;\n  font-size: 28px;\n  text-shadow: 0 0 0 #0ffffffffffffffa4240ffffffffffffffa4 1px 0\n      #0ffffffffffffff770fffffffffffffff70ffffffffffffff77 2px 2px 0\n      #0ffffffffffffff4a0ffffffffffffffca0ffffffffffffff4a 3px 2px\n      rgba(0, 0, 0, 0.6),\n    3px 3px 1px rgba(0, 0, 0, 0.5), 0px 0 2px rgba(0, 0, 0, 0.2);\n}\n.left {\n  float: left;\n  color: #fff;\n}\n* {\n  margin: 0;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n  font-size: 15px;\n  font-weight: 500;\n  font-family: 'Proxima Nova', sans-serif;\n  /* scrollbar-width: none; */ /* чтобы все scrollbar прокрутки на странице были видимыми */\n}\n.common_wrap {\n  margin-top: 4px;\n  height: 42px;\n  line-height: 42px;\n  background: #273653;\n  border-radius: 5px;\n  text-align: center;\n  color: #fff;\n}\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0;\n}\ninput[type='checkbox' i] {\n  background-color: initial;\n  cursor: default;\n  appearance: checkbox;\n  box-sizing: border-box;\n  padding: initial;\n  border: initial;\n}\ninput[type='radio' i] {\n  background-color: initial;\n  cursor: default;\n  appearance: radio;\n  box-sizing: border-box;\n  padding: initial;\n  border: initial;\n}\n.footer {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 6vh;\n  /* padding-bottom: 10vh; */\n  height: auto;\n}\n.footer-btns {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  position: absolute;\n  width: 70%;\n  background: linear-gradient(to bottom, #1a2c38, #0f212e);\n  padding-top: 5px;\n  padding-bottom: 10px;\n  height: auto;\n  border-radius: 10px;\n  box-shadow: 0 -3px 10px rgba(0, 0, 0, 0.3);\n}\n.btn-success {\n  color: #0f212e;\n  font-weight: 600;\n  background-color: #1fff20;\n  cursor:pointer;\n  transition:1s;\n}\n.btn-secondary {\n  color: black;\n  font-weight: 600;\n  background-color: white;\n  cursor:pointer;\n  transition:1s;\n}\n#log {\n  font-size: 15px;\n  color: #fff;\n  background: #0f212e;\n  overflow: auto;\n  text-align: left;\n  padding: 3px;\n  padding-left: 10px;\n  border: 1px solid #2b485c;\n  display: flex;\n  flex-direction: column;\n  height: 250px; /* 55vh; */\n  width: 100%;\n  margin-bottom: auto;\n}\n#logResult {\n  font-size: 15px;\n  font-weight: bold;\n  color: #fff;\n  background: #0f212e;\n  overflow: auto;\n  text-align: left;\n  padding: 3px;\n  padding-left: 10px;\n  border: 1px solid #2b485c;\n  /* display: flex; */\n  /* flex-direction: column; */\n  height: 45px; /* 55vh; */\n  width: 100%;\n  margin-bottom: auto;\n  white-space: nowrap; /* Запрещаем перенос текста на следующую строку */\n}\nheader {\n  background: linear-gradient(to bottom, #2b485c, #0f212e);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-bottom: 10px;\n  /* padding-left: 30px; */\n  /* padding-right: 30px; */\n}\nheader img {\n  width: 80px;\n  height: auto;\n}\n.hamburguer {\n  display: none;\n}\n.options {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n}\n.select-space {\n  width: auto; /* 100px; */\n  padding-top: 10px;\n}\n#statistic {\n  height: 75px;\n  font-size: 15px;\n  text-align: center;\n  color: #fff;\n  padding: 3px;\n  padding-left: 10px;\n  padding-right: 10px;\n  background-color: #213743;\n}\n.content {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n.chart {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #0f212e;\n  border: 1px solid #2b485c;\n  height: 250px; /* 55vh; */\n  width: 100%;\n  padding-right: 10px;\n  padding-left: 10px;\n}\n@media (max-width: 900px) {\n  .chart {\n    display: none;\n  }\n  header {\n    height: 80px;\n  }\n  header img {\n    width: 100px;\n  }\n  .hamburguer {\n    display: block;\n    cursor: pointer;\n  }\n  .hamburguer .line {\n    width: 30px;\n    height: 3px;\n    background-color: #fefefe;\n    margin: 6px 0;\n  }\n  .options {\n    height: 0;\n    position: absolute;\n    top: 80px;\n    left: 0;\n    right: 0;\n    width: 100%;\n    background: linear-gradient(to top, #2b4557, #0f212e);\n    transition: 0.5s;\n    overflow: hidden;\n  }\n  .options.active {\n    height: 450px;\n  }\n  .options .boxDiv {\n    display: block;\n    padding: 0;\n    width: fit-content;\n    text-align: center;\n    height: 100%;\n    margin: 0 auto;\n    transition: 0.5s;\n    opacity: 0;\n  }\n  .options.active .boxDiv {\n    opacity: 1;\n  }\n}\n@media (max-width: 768px) {\n  .footer-btns {\n    display: flex;\n    flex-direction: column;\n    width: 50%;\n  }\n  .footer {\n    padding-top: 30%;\n  }\n}\n#myChart {\n  height: 250px; /* 55vh; */\n  width: 100%;\n}\n.boxDiv {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n\n.inputFields {\n\t//margin: 15px 0;\n\t//margin: 3px;\n\tfont-size: 15px;\n\tfont-weight: bold;\n\t//padding: 2px;\n\tborder:1px solid #0f212e;\n\t//border-top: none;\n\t//border-left: none;\n\t//border-right: none;\n\t//background: rgba(20, 20, 20, 0.2);\n\tcolor: white;\n\t//outline: none;\n\t//border: 2px dotted white;\n\tpadding: 0.1rem;\n\tborder-radius:5px;\n\tbackground:#0f212e;\n\twidth: 110px;\n}\nselect option {\n\tcolor: white;\n\tbackground: #0f212e;\n\tfont-size: 15px;\n\tfont-weight: bold;\n}\nselect {\n\ttext-align: center;\n\ttext-align-last: center;\n\t/* webkit*/\n}\n</style>";
var html = "<div class=\"boxDice\" id=\"isDynamic\">\n        <header>\n            <div>\n                <!-- <img src=\"logo/logo.svg\" alt=\"W-Crash Logo\"> -->\n\t\t\t\t<!-- <img src=\"logo/crash.png\" alt=\"W-Crash Logo\"> -->\n\t\t\t\t<!-- <img src=\"strash.png\" alt=\"W-Crash Logo\"> -->\n\t\t\t\t<img src=\"https://i.imgur.com/JkieneR.png\" alt=\"W-Crash Logo\">\n            </div>\n\n            <div class=\"hamburguer\">\n                <div class=\"line\"></div>\n                <div class=\"line\"></div>\n                <div class=\"line\"></div>\n            </div>\n\n            <nav class=\"options\">\n                <div class=\"boxDiv\">\n                    <div class=\"divTitle\">\n\t\t\t\t\t\t\n                        <label class=\"divTitle\"for=\"balancePerc\">Base Bet, Balance %</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"balancePerc\" type=\"text\" id=\"balancePerc\" value=\"0.0001\">\n\t\t\t\t\t\t<!--\n\t\t\t\t\t\t<label class=\"divTitle\"for=\"basebet\">Base Bet</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"basebet\" type=\"text\" id=\"basebet\" value=\"0.00000000\">\n\t\t\t\t\t\t-->\n                    </div>\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"payout\">Payout, X</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"payout\" type=\"text\" id=\"payout\" value=\"11.00\">\n                    </div>\t\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"preStreak\">Pre Streak</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"preStreak\" type=\"text\" id=\"preStreak\" value=\"5\">\n                    </div>\n\t\t\t\t\t<!--\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"preStreakMulti\">Pre Streak Multi</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"preStreakMulti\" type=\"text\" id=\"preStreakMulti\" value=\"2.00\">\n                    </div>\n\t\t\t\t\t-->\n\t\t\t\t\t<!--\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"streakBelow\">Streak Below</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"streakBelow\" type=\"text\" id=\"streakBelow\" value=\"10\">\n                    </div>\t\n\t\t\t\t\t-->\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"winsWins\">Wins</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"winsWins\" type=\"text\" id=\"winsWins\" value=\"3\">\n                    </div>\t\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"intervalInterval\">Interval</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"intervalInterval\" type=\"text\" id=\"intervalInterval\" value=\"15\">\n                    </div>\t\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"entrysEntrys\">Entrys</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"entrysEntrys\" type=\"text\" id=\"entrysEntrys\" value=\"20\">\n                    </div>\t\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"timeTime\">Time</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"timeTime\" type=\"text\" id=\"timeTime\" value=\"30\">\n                    </div>\t\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"increaseLose\">Increase Bet, %</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"increaseLose\" type=\"text\" id=\"increaseLose\" value=\"20.00\">\n                    </div>\t\n                    <div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"profitStop\">Profit Target</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"profitStop\" type=\"text\" id=\"profitStop\" value=\"1000000\">\n                    </div>\t\n\t\t\t\t\t<!--\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"amountVault\">Amount (to Vault)</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"amountVault\" type=\"text\" id=\"amountVault\" value=\"10\">\n                    </div>\t\n\t\t\t\t\t-->\n\t\t\t\t\t<!--\n                    <div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"token\">Stake API</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"token\" type=\"text\" id=\"token\" placeholder=\"Stake - API\" value=\"\">\n                    </div>\n\t\t\t\t\t-->\n\t\t\t\t\t\n\t\t\t\t\t<!--\n                    <div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"email\">E-mail</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"email\" type=\"text\" id=\"email\" placeholder=\"E-mail\" value=\"\">\n                    </div>\n\t\t\t\t\t-->\n\t\t\t\t\t<!--\n                    <div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"sheet-id\">Table - Link</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"sheet-id\" type=\"text\" id=\"sheet-id\" placeholder=\"Link\" value=\"\">\n                    </div>\n                    <div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"sheet-id\">Table - Name</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"sheet-name\" type=\"text\" id=\"sheet-name\" placeholder=\"Nome\" value=\"\">\n                    </div>\n\t\t\t\t\t-->\n                </div>\n                \n                <div class=\"boxDiv\">\n\t\t\t\t\t<div class=\"_divTitle\">\n\t\t\t\t\t\t<input id=\"payoutListActive\" style=\"margin-left: -15px;\" type=\"checkbox\" checked=\"checked\" title=\"Payout List Active\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"divTitle1\">\n                        <label class=\"divTitle\"for=\"payoutList\">Payout List</label>\n                        <input class=\"StandardTextBox InputBox1\" name=\"payoutList\" type=\"text\" id=\"payoutList\" placeholder=\"\" value=\"12,11,10,9,8,7,6,5,4,3,2\">\n                    </div>\n\t\t\t\t\t<div class=\"divTitle2\">\n                        <label class=\"divTitle\"for=\"token\">Stake API</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"token\" type=\"text\" id=\"token\" placeholder=\"Stake - API\" value=\"\">\n                    </div>\n                    <div class=\"select-space\">\n                        <select class=\"inputFields form-select\" id=\"mirror\">\n                            <option value=\"stake.com\">stake.com</option>\n                            <option value=\"stake.games\">stake.games</option>\n                            <option value=\"stake.bet\">stake.bet</option>\n                            <option value=\"staketr.com\">staketr.com</option>\n                            <option value=\"stake.mba\">stake.mba</option>\n                            <option value=\"stake.ceo\">stake.ceo</option>\n\t\t\t\t\t\t\t<option value=\"stake1001.com\">stake1001.com</option>\n\t\t\t\t\t\t\t<option value=\"stake1002.com\">stake1002.com</option>\n\t\t\t\t\t\t\t<option value=\"stake1003.com\">stake1003.com</option>\n                            <option value=\"stake1004.com\">stake1004.com</option>\n                            <option value=\"stake.bz\">stake.bz</option>\n                            <option value=\"stake.jp\">stake.jp</option>\n                            <option value=\"stake.ac\">stake.ac</option>\n                            <option value=\"stake.krd\">stake.krd</option>\n\t\t\t\t\t\t\t<option value=\"stake.kim\">stake.kim</option>\n\t\t\t\t\t\t\t<option value=\"stake.pink\">stake.pink</option>\n\t\t\t\t\t\t\t<option value=\"stake.us\">stake.us</option>\n                        </select>\n                    </div>\n\t\t\t\t\t<div class=\"select-space\">\n                        <select class=\"inputFields form-select\" id=\"gamegame\">\n\t\t\t\t\t\t\t<option value=\"crash\">Crash</option>\n                            <option value=\"slide\">Slide</option>\n                        </select>\n                    </div>\n                    <div class=\"select-space\">\n                        <select class=\"inputFields form-select\" id=\"currentCoin\">\n\t\t\t\t\t\t\t<option selected value=\"\">Currency</option>\n                            <option value=\"btc\">BTC</option>\n                            <option value=\"eth\">ETH</option>\n                            <option value=\"ltc\">LTC</option>\n                            <option value=\"usdt\">USDT</option>\n                            <option value=\"doge\">DOGE</option>\n                            <option value=\"bch\">BCH</option>\n                            <option value=\"xrp\">XRP</option>\n                            <option value=\"eos\">EOS</option>\n\t\t\t\t\t\t\t<option value=\"trx\">TRX</option>\n                            <option value=\"bnb\">BNB</option>\n                            <option value=\"usdc\">USDC</option>\n                            <option value=\"ape\">APE</option>\n                            <option value=\"busd\">BUSD</option>\n                            <option value=\"cro\">CRO</option>\n                            <option value=\"dai\">DAI</option>\n                            <option value=\"link\">LINK</option>\n                            <option value=\"sand\">SAND</option>\n                            <option value=\"shib\">SHIB</option>\n                            <option value=\"uni\">UNI</option>\n\t\t\t\t\t\t\t<option value=\"matic\">MATIC</option>\n\t\t\t\t\t\t\t<option value=\"eur\">EUR</option>\n\t\t\t\t\t\t\t<option value=\"usd\">USD</option>\n\t\t\t\t\t\t\t<option value=\"jpy\">JPY</option>\n\t\t\t\t\t\t\t<option value=\"brl\">BRL</option>\n                            <option value=\"cad\">CAD</option>\n\t\t\t\t\t\t\t<option value=\"inr\">INR</option>\n\t\t\t\t\t\t\t<option value=\"ars\">ARS</option>\n\t\t\t\t\t\t\t<option value=\"clp\">CLP</option>\n\t\t\t\t\t\t\t<option value=\"dkk\">DKK</option>\n\t\t\t\t\t\t\t<option value=\"mxn\">MXN</option>\n\t\t\t\t\t\t\t<option value=\"pen\">PEN</option>\n\t\t\t\t\t\t\t<option value=\"gold\">GOLD(.us)</option>\n\t\t\t\t\t\t\t<option value=\"sweeps\">SWEEPS(.us)</option>\n                        </select>\n                    </div>\n                    <div class=\"select-space\">\n                        <select class=\"inputFields form-select\" id=\"strategy\">\n                            <!-- <option selected value=\"\">Strategy</option> -->\n\t\t\t\t\t\t\t<option value=\"\">Strategy</option>\n\t\t\t\t\t\t\t<option value=\"pattern\" selected=\"selected\">Pattern</option>\n\t\t\t\t\t\t\t<!-- <option value=\"streak\" selected=\"selected\">Streak</option> -->\n\t\t\t\t\t\t\t<!--\n                            <option value=\"safe-01\">Low Risk - 01</option>\n                            <option value=\"safe-02\">Low Risk - 02</option>\n\t\t\t\t\t\t\t<option value=\"safe-03\">Low Risk - 03</option>\n                            <option value=\"medium-01\">Medium Risk - 01</option>\n                            <option value=\"medium-02\">Medium Risk - 02</option>\n                            <option value=\"risk-01\">High Risk - 01</option>\n                            <option value=\"risk-02\">High Risk - 02</option>\n\t\t\t\t\t\t\t-->\n                            <!-- <option value=\"risk-03\">Alto Risco - 03</option> -->\n                        </select>\n                    </div>\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"balanceVault\">Balance > (to Vault)</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"balanceVault\" type=\"text\" id=\"balanceVault\" value=\"1000000\">\n                    </div>\n\t\t\t\t\t<div class=\"divTitle\">\n                        <label class=\"divTitle\"for=\"stopLoss\">Stop Loss</label>\n                        <input class=\"StandardTextBox InputBox\" name=\"stopLoss\" type=\"text\" id=\"stopLoss\" value=\"1000000\">\n                    </div>\n                </div>\n                \n            </nav>\n        </header>\n\n        <div id=\"spacer\"></div>\n        <div id=\"statistic\">Waiting to start. ⏳</div>\t\n        <div id=\"spacer\"></div>\n\t\t<div id=\"logResult\"> </div>\t\n        <div id=\"spacer\"></div>\n        <div class=\"content\">\n            <div id=\"log\">Waiting to start. ⏳</div>\t\n\t\t\t<div id=\"myChart\" style=\"width: 100%; border: 2 solid #181a1e;\"></div>\n\t\t\t<!--\n            <div class=\"chart\">\n                <div>\n                    <canvas id=\"myChart\"></canvas>\n                </div>\n            </div>\t\n\t\t\t-->\n        </div>\n        <div class=\"footer\">\n                <div class=\"footer-btns\">\n                    <div class=\"boxButtons\">\n                        Time\n                        <span id=\"_playtime\">00:00:00:00</span>\n                    </div>\n                    <div class=\"boxButtons\">\n                        <input type=\"button\" id=\"_start\" class=\"btn btn-success\" value=\"START\"/>\n                    </div>\n\t\t\t\t\t<div class=\"boxButtons\">\n                        <input type=\"button\" id=\"_stopwin\" class=\"btn btn-success\" value=\"STOP WIN\"/>\n                    </div>\n\t\t\t\t\t<!--\n                    <div class=\"boxButtons\">\n                        <input type=\"button\" id=\"_email\" class=\"btn btn-secondary\" value=\"Reset E-mail\"/>\n                    </div>\n\t\t\t\t\t-->\n                    <div class=\"boxButtons\">\n                        <input type=\"button\" id=\"_bot\" class=\"btn btn-secondary\" value=\"RELOAD BOT\"/>\n                    </div>\n                </div>\t\n           </table>\n        </div>\n    </div>";
var dps = [];
var chart = "";
var bets = 0;
var colorChart = "";
function addJs(_0x517e49, _0x3935a8) {
  var _0x32b74f = document.createElement("script");
  _0x32b74f.type = "text/javascript";
  _0x32b74f.src = _0x517e49;
  _0x32b74f.onload = _0x3935a8;
  document.head.appendChild(_0x32b74f);
}
function addJsF(_0x3734ee, _0x32fe13) {
  fetch(_0x3734ee).then(function (_0x465ebc) {
    if (!_0x465ebc.ok) {
      return false;
    }
    return _0x465ebc.blob();
  }).then(function (_0xc34d7f) {
    var _0x268f78 = URL.createObjectURL(_0xc34d7f);
    var _0x2cf9e0 = document.createElement("script");
    _0x2cf9e0.setAttribute("src", _0x268f78);
    _0x2cf9e0.setAttribute("type", "text/javascript");
    document.body.appendChild(_0x2cf9e0);
    _0x32fe13();
  });
}
var script = document.createElement("script");
script.src = "https://code.jquery.com/jquery-3.6.3.min.js";
document.head.append(script);
script.onload = function () {
  $("head").append(style);
  document.body.innerHTML = html;
  var _0x469667 = "Strash Bot";
  $.getScript("https://canvasjs.com/assets/script/canvasjs.min.js").done(function (_0x297a91, _0x361ee3) {
    dps = [{
      x: 0,
      y: 0
    }];
    var _0x473b30 = {
      backgroundColor: "transparent",
      theme: "light2",
      zoomEnabled: true,
      axisX: {
        title: "Bets",
        includeZero: false
      },
      axisY: {},
      title: {
        fontColor: "#2eab5b",
        fontSize: 20,
        padding: 20
      },
      data: [{
        type: "line",
        dataPoints: dps
      }]
    };
    _0x473b30.axisY.title = "Profit";
    _0x473b30.axisY.includeZero = false;
    chart = new CanvasJS.Chart("myChart", _0x473b30);
    chart.render();
  });
  if (localStorage.getItem("api_key") != null) {
    document.getElementById("token").value = localStorage.getItem("api_key");
  }
  if (localStorage.getItem("mir_ror") != null) {
    document.getElementById("mirror").value = localStorage.getItem("mir_ror");
  }
  if (localStorage.getItem("curr_ency") != null) {
    document.getElementById("currentCoin").value = localStorage.getItem("curr_ency");
  }
  document.getElementById("currentCoin").onchange = function () {
    checkBalance = true;
    var _0x4f0ac4 = document.getElementById("currentCoin");
    var _0x62cc34 = _0x4f0ac4.options[_0x4f0ac4.selectedIndex].value;
    localStorage.setItem("curr_ency", _0x62cc34);
  };
  document.getElementById("_start").onclick = function () {
    startDice();
  };
  document.getElementById("_bot").onclick = function () {
    resetBot();
  };
  document.getElementById("_stopwin").onclick = function () {
    stopOnWin();
  };
};
function updateChart(_0x2e32ff, _0x5ebc96, _0x1504cd) {
  var _0x7e74ca = {
    x: _0x2e32ff,
    y: _0x5ebc96,
    color: _0x1504cd
  };
  dps.push(_0x7e74ca);
  if (dps[dps.length - 2]) {
    dps[dps.length - 2].lineColor = _0x1504cd;
  }
  if (dps.length > 1000) {
    dps.shift();
  }
  chart.render();
}
var config = {
  baseBet: {
    value: 0
  },
  basePayout: {
    value: 2
  },
  winRepeat: {
    value: 1
  },
  stop: {
    value: 1000000000000
  },
  lossSeriesSet: {
    value: 1
  },
  lossBetSeries: {
    value: "2/3/4/5"
  },
  lossPoSeries: {
    value: "1.9/1.8/1.7/1.6"
  },
  winSeriesSet: {
    value: 1
  },
  winBetSeries: {
    value: "2/2/2/2"
  },
  winPoSeries: {
    value: "2.5/2.6/2.7/2.8"
  },
  beginSeriesSet: {
    value: 1
  },
  continueSeriesSet: {
    value: 1
  },
  endSeriesSet: {
    value: 1
  },
  checkListMode: {
    value: 0
  }
};
var beginBet = config.baseBet.value;
var beginPayout = config.basePayout.value;
var currentBet = beginBet;
var currentPayout = beginPayout;
var lossSeriesSet = config.lossSeriesSet.value;
var lossBetSeries;
var lossPoSeries;
var winSeriesSet = config.winSeriesSet.value;
var winBetSeries;
var winPoSeries;
var winRepeat = config.winRepeat.value;
var beginStatus = config.beginSeriesSet.value;
var contStatus = config.continueSeriesSet.value;
var endStatus = config.endSeriesSet.value;
var checkModeStatus = config.checkListMode.value;
var lossStatus = 0;
var winStatus = 0;
var baseStatus = 1;
var gameCount = 0;
var repProvision = 0;
var repValidCount = 0;
var matchValidEquals = 0;
var matchValidGreater = 0;
var matchValidLess = 0;
var refurl = "Strash Bot";
var _start = 0;
var date = new Date();
var startdate = date;
var startTime = new Date();
var playTimer;
var runLog = 0;
var goLog = 0;
var basebet = 1e-8;
var payout1 = 1.1;
var payout2 = 2;
var payout = 10;
var payoutBase = 10;
var payoutList = "12,11,10,9,8,7,6,5,4,3,2";
var payoutListMas = [];
var payoutListCur = 0;
var streakBelow = 20;
var increaseLose = 12;
var streakBelowCur = 0;
var maxstreakBelow = 0;
var preStreak = 50;
var preStreakMulti = 2;
var preStreakMultiCur = 0;
var preStreakCur = 0;
var preStreakCheck = false;
var stopWinCheck = false;
var winsWins = 3;
var intervalInterval = 15;
var entrysEntrys = 20;
var timeTime = 30;
var winsWinsCur = 0;
var intervalIntervalCur = 0;
var entrysEntrysCur = 0;
var timeTimeCur = 0;
var entrysEntrysTotal = 0;
var preStreakCheckFirst = false;
var workBet = 0;
var runPattern = false;
var amount = 0;
var errTrue = false;
var gameNumber = 0;
var trigger = 1;
var triggers = 0;
var strategy = "";
var balanceVault = 0;
var stopLoss = 0;
var amountVault = 0;
var check_balance_vault = false;
var resetBalancePlus = false;
var mirror = "stake.com";
var token = "";
var currency = "";
var bet = basebet;
var balancePerc = 0.01;
var firstBet = true;
var balance = 0;
var startBalance = balance;
var lastBalance = balance;
var llastBalance = balance;
var lllastBalance = balance;
var last_balance = balance;
var llast_balance = balance;
var run = false;
var runSeed = true;
var roundWin = 0;
var roundLose = 0;
var profit = 0;
var profitTotal = 0;
var profitStop = 0;
var maxLoseAmount = 0;
var maxBetAmount = 0;
var multBet = 1;
var wagered = 0;
var maxBet = 0;
var maxLose = 0;
var consClear = 0;
var runRes = false;
var win = true;
var prevBet = bet;
var prevPayout = payout;
var checkBal = false;
var checkBall = false;
var checkBalance = true;
var resTrue = false;
var startFirst = true;
var err = false;
var historyHash = "";
var historyHashHash = "";
var crashpoint1 = "";
var hashhash1 = "";
var historyPoint = "";
var historyPointPoint = "";
var startDataHistory = true;
var goBet = false;
var curHistory = 0;
var firstGo = 0;
var firstGoTrue = true;
var goRun = false;
var run_dobet = false;
var checkBet = false;
var bet_found = false;
var bet_placed = false;
var pat = [];
var patResult = [];
var pat_result = "";
var pat_result_id = 0;
var patt = [];
var patLast5 = [];
var patternReset = 0;
var patternGood = 0;
var gamegame = "crash";
var game = 1;
var firstMartin = 0;
var firstMartinPat = false;
var firstMainBetBet = 0;
var firstMainBet = false;
var finishBetTrue = false;
var lastHash = ["placeholder"];
var expiredHash = ["placeholder2"];
var crashPoint = [0];
var mirrorCur = 0;
var change_mirror_cur = 0;
var runTime = false;
var socketConnect = false;
var waitBet = setInterval(function () {}, 1000);
clearInterval(waitBet);
var waitBetTime = setInterval(function () {}, 1000);
clearInterval(waitBetTime);
var goBetBet = setInterval(function () {}, 1000);
clearInterval(goBetBet);
var waitBalance = setInterval(function () {}, 1000);
clearInterval(waitBalance);
function red(_0x1decb7) {
  return "[31m" + _0x1decb7;
}
function yellow(_0x17581d) {
  return "[33m" + _0x17581d;
}
function green(_0x49e0e7) {
  return "[32m" + _0x49e0e7;
}
function cyan(_0x446c3b) {
  return "[36m" + _0x446c3b;
}
function blue(_0xe00b02) {
  return "[34m" + _0xe00b02;
}
var runs = true;
var _xa7d8ac5 = "";
var _0x31e28d = {
  a: 0,
  b: !1
};
var conf = _0x31e28d;
function _x0ca42f0(_0x4693c0) {
  var _0x174a29 = _xa7d8ac5;
  var _0x130c59 = false;
  var _0x4facbc = "";
  $.get("https://raw.githubusercontent.com/vst212/stake/master/crashbot-users", function (_0x701886, _0x445b6c) {}).done(function (_0x13e023) {
    _0x4facbc = JSON.parse(_0x13e023);
    for (var _0x325a36 = 0; _0x325a36 < _0x4facbc.length; _0x325a36++) {
      if (_0x4facbc[_0x325a36].toUpperCase() == _0x174a29.toUpperCase()) {
        _0x130c59 = true;
      }
    }
    if (_0x130c59 == true) {
      conf.b = true;
    } else {
      conf.b = false;
      run = false;
      alert("You do not have permission to use this bot! Contact the developer!");
      log("You do not have permission to use this bot! Contact the developer!");
    }
    _0x4693c0();
  });
}
function _x0f1add2(_0x310363) {
  function _0x29cb64() {
    fetch("https://" + mirror + "/_api/graphql", {
      headers: {
        "content-type": "application/json",
        "x-access-token": token
      },
      body: "{\"operationName\":\"initialUserRequest\",\"variables\":{},\"query\":\"query initialUserRequest {\\n  user {\\n    ...UserAuth\\n    __typename\\n  }\\n}\\n\\nfragment UserAuth on User {\\n  id\\n  name\\n  email\\n  hasPhoneNumberVerified\\n  hasEmailVerified\\n  hasPassword\\n  intercomHash\\n  createdAt\\n  hasTfaEnabled\\n  mixpanelId\\n  hasOauth\\n  flags {\\n    flag\\n    __typename\\n  }\\n  roles {\\n    name\\n    __typename\\n  }\\n  balances {\\n    ...UserBalanceFragment\\n    __typename\\n  }\\n  activeClientSeed {\\n    id\\n    seed\\n    __typename\\n  }\\n  previousServerSeed {\\n    id\\n    seed\\n    __typename\\n  }\\n  activeServerSeed {\\n    id\\n    seedHash\\n    nextSeedHash\\n    nonce\\n    blocked\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment UserBalanceFragment on UserBalance {\\n  available {\\n    amount\\n    currency\\n    __typename\\n  }\\n  vault {\\n    amount\\n    currency\\n    __typename\\n  }\\n  __typename\\n}\\n\"}",
      method: "POST"
    }).then(_0xca8fdb => {
      return _0xca8fdb.json();
    }).then(_0x510965 => {
      console.log(_0x510965);
      if (_0x510965.errors) {
        log("<font style=\"color:red;font-size:15px;\">Error: " + JSON.stringify(_0x510965.errors) + "</font>");
        log("<font style=\"color:red;font-size:15px;\">==========</font>");
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
      }
      if (_0x510965.data) {
        _xa7d8ac5 = _0x510965.data.user.name;
        conf.a = _0x510965.data.user.name;
      }
      _0x310363();
    }).catch(function (_0x276113) {
      console.log(_0x276113);
      log("<font style=\"color:red;font-size:15px;\">Error: " + JSON.stringify(_0x276113) + "</font>");
      log("<font style=\"color:red;font-size:15px;\">==========</font>");
      if (run) {
        setTimeout(() => {
          _0x29cb64();
        }, 1000);
      }
    });
  }
  _0x29cb64();
}
function startDice() {
  _start = !_start;
  if (!_start) {
    $("#_start").val("START");
    $("#_start").css("color", "#0f212e");
    clearInterval(playTimer);
    clearInterval(waitBet);
    clearInterval(waitBetTime);
    stopp();
    return;
  } else {
    $("#_start").val("STOP");
    $("#_start").css("color", "red");
    currentPayout = beginPayout;
    payout = parseFloat($("#payout").val());
    payoutBase = parseFloat($("#payout").val());
    payoutList = $("#payoutList").val();
    payoutListMas = payoutList.split(",").map(_0x2bbc03 => +_0x2bbc03);
    payoutListCur = 0;
    if (document.getElementById("payoutListActive").checked == true) {
      payout = payoutListMas[payoutListCur];
    }
    preStreak = parseFloat($("#preStreak").val());
    if (preStreak < 0) {
      preStreak = 0;
    }
    preStreak = parseInt(preStreak);
    $("#preStreak").val(preStreak);
    winsWins = parseFloat($("#winsWins").val());
    if (winsWins < 0) {
      winsWins = 0;
    }
    winsWins = parseInt(winsWins);
    $("#winsWins").val(winsWins);
    intervalInterval = parseFloat($("#intervalInterval").val());
    if (intervalInterval < 0) {
      intervalInterval = 0;
    }
    intervalInterval = parseInt(intervalInterval);
    $("#intervalInterval").val(intervalInterval);
    entrysEntrys = parseFloat($("#entrysEntrys").val());
    if (entrysEntrys < 0) {
      entrysEntrys = 0;
    }
    entrysEntrys = parseInt(entrysEntrys);
    $("#entrysEntrys").val(entrysEntrys);
    timeTime = parseFloat($("#timeTime").val());
    increaseLose = parseFloat($("#increaseLose").val());
    profitStop = parseFloat($("#profitStop").val());
    strategy = $("#strategy").val();
    balanceVault = parseFloat($("#balanceVault").val());
    stopLoss = parseFloat($("#stopLoss").val());
    streakBelowCur = 0;
    preStreakCur = 0;
    preStreakMultiCur = 0;
    preStreakCheck = false;
    stopWinCheck = false;
    winsWinsCur = 0;
    intervalIntervalCur = 0;
    entrysEntrysCur = 0;
    timeTimeCur = 0;
    entrysEntrysTotal = 0;
    preStreakCheckFirst = false;
    workBet = basebet;
    gamegame = $("#gamegame").val();
    currency = $("#currentCoin").val();
    token = $("#token").val();
    mirror = $("#mirror").val();
    if ($("#token").val() == "") {
      console.log("Input Api Key");
      log("<font style=\"color:red;font-size:15px;\">Input API Key</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      return;
    }
    if ($("#currentCoin").val() == "") {
      console.log("Currency not selected");
      log("<font style=\"color:red;font-size:15px;\">Currency not selected</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      return;
    }
    if ($("#strategy").val() == "") {
      console.log("Strategy not selected");
      log("<font style=\"color:red;font-size:15px;\">Strategy not selected</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      return;
    }
    var _0xd557b8 = document.getElementById("token").value;
    localStorage.setItem("api_key", _0xd557b8);
    var _0x3beb78 = document.getElementById("mirror");
    var _0x526bb = _0x3beb78.options[_0x3beb78.selectedIndex].value;
    localStorage.setItem("mir_ror", _0x526bb);
    var _0x4b2406 = document.getElementById("currentCoin");
    var _0x14733d = _0x4b2406.options[_0x4b2406.selectedIndex].value;
    localStorage.setItem("curr_ency", _0x14733d);
    if (strategy == "streak") {}
    run = true;
    if (runs) {
      _x0f1add2(function () {
        _x0ca42f0(function () {
          if (conf.b) {
            runs = false;
            playTimer = setInterval(playTime, 1000);
            getBalanceStart();
          } else {
            runs = true;
          }
        });
      });
    } else {
      playTimer = setInterval(playTime, 1000);
      getBalanceStart();
    }
  }
}
function start() {
  balancePerc = parseFloat($("#balancePerc").val());
  basebet = balance * balancePerc / 100;
  if (basebet < 0) {
    basebet = 0;
  }
  bet = basebet;
  currentBet = bet;
  beginBet = bet;
  runTime = true;
  run = true;
  runRes = false;
  runSeed = true;
  startDataHistory = true;
  checkBal = false;
  checkBall = false;
  goBet = false;
  goRun = false;
  firstGo = 0;
  firstGoTrue = true;
  firstMartin = 0;
  firstMartinPat = false;
  err = false;
  win = true;
  pat = [];
  patResult = [];
  pat_result = "";
  pat_result_id = 0;
  patt = [];
  patLast5 = [];
  runPattern = false;
  triggers = 0;
  historyHash = "";
  historyHashHash = "";
  historyPoint = "";
  historyPointPoint = "";
  lastHash = ["placeholder"];
  expiredHash = ["placeholder2"];
  crashPoint = [0];
  game = 1;
  startScoket();
  console.log("%c Started", "color: green; font-size: x-large");
  log("<font style=\"color:green;font-size:15px;\">Started</font>");
  $("#log").stop().animate({
    scrollTop: $("#log")[0].scrollHeight
  });
}
function stopp() {
  firstMainBetBet = 0;
  runTime = false;
  run = false;
  runSeed = false;
  clearInterval(waitBetTime);
  clearInterval(waitBet);
  clearInterval(goBetBet);
  clearInterval(waitBalance);
  console.log("%c Stopped", "color: red; font-size: x-large");
  log("<font style=\"color:red;font-size:15px;\">Stopped</font>");
  $("#log").stop().animate({
    scrollTop: $("#log")[0].scrollHeight
  });
}
function resetDice() {
  pat = [];
  patLast5 = [];
  err = false;
  if ($("#seedTrigger").is(":checked")) {
    runSeed = true;
    resetSeed();
  }
  console.log("Reset Trigger");
  console.log("==========");
  log("<font style=\"color:white;font-size:15px;\">Reset Trigger</font>");
  log("<font style=\"color:white;font-size:15px;\">==========</font>");
  $("#log").stop().animate({
    scrollTop: $("#log")[0].scrollHeight
  });
}
function resetBot() {
  window.location.reload();
}
function stopOnWin() {
  stopWinCheck = true;
}
function log(_0x29d3e0) {
  $("<p style=\"margin: 0px;\">" + _0x29d3e0 + "</p>").appendTo("#log");
  goLog++;
  if (goLog >= 1000) {
    $("#log p")[0].remove();
  }
}
function logResult(_0x5c7fb9) {
  $("<p style=\"margin: 0px;\">" + _0x5c7fb9 + "</p>").appendTo("#logResult");
}
function playTime() {
  var _0x4cac9a = new Date().getTime() - startTime;
  var _0x9ac59d = Math.floor(_0x4cac9a / 86400000);
  var _0x42817e = Math.floor(_0x4cac9a % 86400000 / 3600000);
  var _0x6da3b8 = Math.floor(_0x4cac9a % 3600000 / 60000);
  var _0xd97673 = Math.floor(_0x4cac9a % 60000 / 1000);
  if (runTime) {
    $("#_playtime").html(_0x9ac59d + ":" + _0x42817e + ":" + _0x6da3b8 + ":" + _0xd97673);
  }
}
function doBet() {
  consClear++;
  if (consClear >= 1000) {
    consClear = 0;
    console.clear();
  }
  goRun = false;
  if (checkBal == true) {
    checkBal = false;
  }
  if (checkBall == true) {
    checkBall = false;
    if (err == false) {}
  }
  if (gamegame == "crash") {
    if (Number(crashpoint1) > payout) {
      win = true;
    } else {
      win = false;
    }
  } else if (Number(crashpoint1) >= payout) {
    win = true;
  } else {
    win = false;
  }
  if (err == true) {
    console.log("%c Place Bet Error", "color:red; font-size:x-large");
    log("<font style=\"color:red;font-size:15px;\">Place Bet Error</font>");
    log("<font style=\"color:red;font-size:15px;\">==========</font>");
    $("#log").stop().animate({
      scrollTop: $("#log")[0].scrollHeight
    });
  }
  errTrue = false;
  if (firstGoTrue == true) {
    console.log("Waiting...");
    console.log("==========");
    log("<font style=\"color:white;font-size:15px;\">Waiting...</font>");
    $("#log").stop().animate({
      scrollTop: $("#log")[0].scrollHeight
    });
    firstGo++;
  }
  if (firstGo == 1) {
    firstGoTrue = false;
    goBet = true;
    gameNumber++;
    var _0xa4890d = Number(crashpoint1);
    if (strategy == "streak") {
      pat.push(_0xa4890d);
      if (pat.length > streakBelow) {
        pat.shift();
      }
    }
    if (strategy == "pattern") {
      pat.push(_0xa4890d);
    }
    log("<font style=\"color:cyan;font-size:15px;\">Crashed: " + _0xa4890d + "</font>");
    if (strategy == "safe-03") {
      log("<font style=\"color:cyan;font-size:15px;\">Patterns: " + pat + "</font>");
    }
    log("<font style=\"color:cyan;font-size:15px;\">==========</font>");
    if (strategy == "safe-03") {
      getBalance(function () {
        if (balance >= last_balance) {
          last_balance = balance;
        }
        profitTotal = balance - startBalance;
        if (win) {
          colorChart = "green";
        } else {
          colorChart = "red";
        }
        if (firstMainBet) {
          updateChart(bets, profitTotal, colorChart);
        }
        if (balance >= lllastBalance) {
          lllastBalance = balance;
        }
        if (lllastBalance - balance >= maxLose) {
          maxLose = lllastBalance - balance;
        }
        $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
        errTrue = false;
        if (profitTotal >= profitStop) {
          log("<font style=\"color:green;font-size:15px;\">Stop On Profit: " + profitTotal + " " + currency.toUpperCase() + "</font>");
          log("<font style=\"color:green;font-size:15px;\">==========</font>");
          $("#log").stop().animate({
            scrollTop: $("#log")[0].scrollHeight
          });
          $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
          stopp();
          return;
        }
        if (err == false) {
          if (balance >= last_balance) {
            bet = basebet;
            payout = 2;
          } else {
            mainBet();
            bet = Number(currentBet);
            payout = Number(currentPayout);
          }
        }
        if (bet > balance) {
          log("<font style=\"color:red;font-size:15px;\">Insufficient funds</font>");
          log("<font style=\"color:red;font-size:15px;\">==========</font>");
          $("#log").stop().animate({
            scrollTop: $("#log")[0].scrollHeight
          });
          stopp();
          return;
        }
        goRun = true;
        checkBet = true;
        if (run) {
          setTimeout(() => {
            startBet();
          }, 1000);
        }
      });
    }
    if (strategy == "safe-03") {
      if (pat[0] > 2 && pat[1] > 2 && pat[2] > 2 && pat[3] > 2 && pat[4] > 2) {
        firstMartinPat = true;
      }
      if (firstMartinPat == true) {
        if (firstMartin == 0) {
          console.log("%c Pattern Success. Placing bet ...", "color:green; font-size:150%");
          log("<font style=\"color:green;font-size:15px;\">Pattern Success. Placing bet ...</font>");
          log("<font style=\"color:green;font-size:15px;\">==========</font>");
          $("#log").stop().animate({
            scrollTop: $("#log")[0].scrollHeight
          });
        }
        getBalance(function () {
          profitTotal = balance - startBalance;
          if (win) {
            colorChart = "green";
          } else {
            colorChart = "red";
          }
          if (firstMainBet) {
            updateChart(bets, profitTotal, colorChart);
          }
          if (balance >= lllastBalance) {
            lllastBalance = balance;
          }
          if (lllastBalance - balance >= maxLose) {
            maxLose = lllastBalance - balance;
          }
          $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
          errTrue = false;
          if (profitTotal >= profitStop) {
            log("<font style=\"color:green;font-size:15px;\">Stop On Profit: " + profitTotal + " " + currency.toUpperCase() + "</font>");
            log("<font style=\"color:green;font-size:15px;\">==========</font>");
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
            $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
            stopp();
            return;
          }
          if (err == false) {
            if (firstMartin == 0) {
              bet = basebet;
              payout = 1.65;
              firstMartin = 1;
            } else if (win) {
              bet = basebet;
              payout = 1.65;
              firstMartinPat = false;
              firstMartin = 0;
              pat = [];
            } else {
              bet = bet * 2;
              payout = 1.65;
            }
          }
          if (bet > balance) {
            log("<font style=\"color:red;font-size:15px;\">Insufficient funds</font>");
            log("<font style=\"color:red;font-size:15px;\">==========</font>");
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
            stopp();
            return;
          }
          if (firstMartinPat) {
            goRun = true;
            checkBet = true;
            if (run) {
              setTimeout(() => {
                startBet();
              }, 1000);
            }
          }
        });
      }
    }
    if (strategy == "pattern") {
      if (gamegame == "crash") {
        if (_0xa4890d <= payout) {
          streakBelowCur++;
          preStreakCur++;
        } else {
          streakBelowCur = 0;
          preStreakCur = 0;
        }
        if (_0xa4890d <= payoutBase) {
          preStreakMultiCur++;
        } else {
          preStreakMultiCur = 0;
        }
        if (preStreakMultiCur >= preStreak) {
          preStreakCheck = true;
        }
        function _0x2d2a2d() {
          if (preStreakCheck) {
            var _0x29b521 = 0;
            var _0x7f4012 = [];
            var _0x3f2638 = [];
            var _0x3ba529 = false;
            var _0x5af87c = false;
            while (_0x5af87c == false) {
              var _0x1ecb63 = 0;
              for (var _0x47fd36 = 0; _0x47fd36 < pat.length; _0x47fd36++) {
                if (pat[_0x47fd36] > payout) {
                  _0x1ecb63++;
                }
              }
              if (_0x1ecb63 > winsWins) {
                pat.shift();
              }
              if (_0x1ecb63 <= winsWins) {
                _0x5af87c = true;
              }
            }
            if (winsWins > 2) {
              if (pat[pat.length - 1] > payout) {
                for (var _0x47fd36 = 0; _0x47fd36 < pat.length; _0x47fd36++) {
                  if (pat[_0x47fd36] > payout) {
                    _0x29b521++;
                    _0x7f4012.push(_0x47fd36);
                  }
                }
                if (_0x29b521 == winsWins) {
                  for (var _0x3694ff = 0; _0x3694ff < _0x7f4012.length - 1; _0x3694ff++) {
                    var _0x4dd47d = _0x7f4012[_0x3694ff + 1] - _0x7f4012[_0x3694ff];
                    _0x3f2638.push(_0x4dd47d);
                  }
                  _0x3ba529 = true;
                  for (var _0x47fd36 = 0; _0x47fd36 < _0x3f2638.length - 1; _0x47fd36++) {
                    if (_0x3f2638[_0x47fd36] == _0x3f2638[_0x47fd36 + 1]) {} else {
                      _0x3ba529 = false;
                    }
                  }
                }
              }
              if (_0x3ba529 && _0x3f2638[0] <= intervalInterval) {
                runPattern = true;
              }
            }
            if (winsWins == 2) {
              if (pat[pat.length - 1] > payout) {
                for (var _0x47fd36 = 0; _0x47fd36 < pat.length; _0x47fd36++) {
                  if (pat[_0x47fd36] > payout) {
                    _0x29b521++;
                    _0x7f4012.push(_0x47fd36);
                  }
                  if (_0x29b521 == winsWins) {
                    for (var _0x3694ff = 0; _0x3694ff < _0x7f4012.length - 1; _0x3694ff++) {
                      var _0x4dd47d = _0x7f4012[_0x3694ff + 1] - _0x7f4012[_0x3694ff];
                      _0x3f2638.push(_0x4dd47d);
                    }
                  }
                }
              }
              if (_0x3f2638[0] <= intervalInterval) {
                runPattern = true;
              }
            }
            if (winsWins == 1) {
              for (var _0x47fd36 = 0; _0x47fd36 < pat.length; _0x47fd36++) {
                if (pat[_0x47fd36] > payout) {
                  runPattern = true;
                }
              }
            }
            if (winsWins <= 0) {
              runPattern = true;
            }
          }
        }
        if (streakBelowCur >= maxstreakBelow) {
          maxstreakBelow = streakBelowCur;
        }
        runPattern = true;
        if (preStreakCheck && runPattern) {
          firstMartinPat = true;
        } else {}
        if (Number(_0xa4890d) > payout) {
          pat_result_id++;
          patResult.push("<span id=\"_patResult" + pat_result_id + "\" style=\"color:white;font-size:15px;font-weight:bold;background-color:green;padding:2px;margin-left:2px;border:1px solid white;border-radius:5px;\">" + Number(toFixedNo(Number(_0xa4890d), 2)).toFixed(2) + "</span>");
        } else {
          pat_result_id++;
          patResult.push("<span id=\"_patResult" + pat_result_id + "\" style=\"color:white;font-size:15px;font-weight:bold;background-color:transparent;padding:2px;margin-left:2px;border:1px solid white;border-radius:5px;\">" + Number(toFixedNo(Number(_0xa4890d), 2)).toFixed(2) + "</span>");
        }
        var _0xe5819b = [];
        for (var _0xa77291 = 0; _0xa77291 < patResult.length; _0xa77291++) {
          _0xe5819b.push(patResult[_0xa77291]);
        }
        _0xe5819b = _0xe5819b.reverse();
        $("#logResult").html(_0xe5819b);
        var _0x1dd211 = [];
        for (var _0xa77291 = 0; _0xa77291 < pat.length; _0xa77291++) {
          if (pat[_0xa77291] > payout) {
            _0x1dd211.push("<id=\"_pat" + _0xa77291 + "\" style=\"color:green;\">" + Number(toFixedNo(Number(pat[_0xa77291]), 2)).toFixed(2));
          } else {
            _0x1dd211.push("<id=\"_pat" + _0xa77291 + "\" style=\"color:white;\">" + Number(toFixedNo(Number(pat[_0xa77291]), 2)).toFixed(2));
          }
        }
        console.log("%c Result: ", "color:white; font-size:100%");
        console.log(pat);
        console.log("==========");
        log("<font style=\"color:white;font-size:15px;\">Result: </font>");
        log("<font style=\"font-size:15px;\">" + _0x1dd211 + "</font>");
        log("<font style=\"color:white;font-size:15px;\">==========</font>");
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
        if (firstMartinPat == true) {
          if (firstMartin == 0) {
            console.log("%c Pattern Success. Placing bet ...", "color:green; font-size:150%");
            log("<font style=\"color:green;font-size:15px;\">Pattern Success. Placing bet ...</font>");
            log("<font style=\"color:green;font-size:15px;\">==========</font>");
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
          }
          getBalance(function () {
            if (balance >= lllastBalance) {
              lllastBalance = balance;
            }
            if (lllastBalance - balance >= maxLose) {
              maxLose = lllastBalance - balance;
            }
            if (balance >= llast_balance) {
              llast_balance = balance;
            }
            $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
            errTrue = false;
            if (err == false) {
              if (firstMartin == 0) {
                bet = basebet;
                if (entrysEntrysTotal > 0) {
                  bet = workBet;
                }
                firstMartin = 1;
                entrysEntrysCur = 0;
                payout = payoutBase;
                if (document.getElementById("payoutListActive").checked == true) {
                  payoutListCur = 0;
                  if (payoutListMas[payoutListCur] == undefined) {
                    payoutListCur = 0;
                  }
                  payout = payoutListMas[payoutListCur];
                }
              } else if (win) {
                entrysEntrysCur = 0;
                entrysEntrysTotal = 0;
                winsWinsCur = 0;
                basebet = balance * balancePerc / 100;
                if (basebet < 0) {
                  basebet = 0;
                }
                bet = basebet;
                workBet = basebet;
                payout = payoutBase;
                if (document.getElementById("payoutListActive").checked == true) {
                  payoutListCur = 0;
                  if (payoutListMas[payoutListCur] == undefined) {
                    payoutListCur = 0;
                  }
                  payout = payoutListMas[payoutListCur];
                }
                if (balance >= llast_balance) {
                  firstMartinPat = false;
                  firstMartin = 0;
                  pat = [];
                  pat_result_id = 0;
                  pat_result = "";
                  patResult = [];
                  runPattern = false;
                  preStreakCur = 0;
                  preStreakMultiCur = 0;
                  preStreakCheck = false;
                  preStreakCheckFirst = false;
                }
                if (balance > balanceVault) {
                  firstMartinPat = false;
                  firstMartin = 0;
                  pat = [];
                  pat_result_id = 0;
                  pat_result = "";
                  patResult = [];
                  runPattern = false;
                  preStreakCur = 0;
                  preStreakMultiCur = 0;
                  preStreakCheck = false;
                  preStreakCheckFirst = false;
                  amountVault = balance - balanceVault;
                  vault(amountVault, function () {});
                }
                streakBelowCur = 0;
                colorChart = "green";
                profitTotal += Number(prevBet) * Number(prevPayout) - Number(prevBet);
                updateChart(bets, profitTotal, colorChart);
                $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                if (stopWinCheck) {
                  log("<font style=\"color:green;font-size:15px;\">Stop On Win: " + profitTotal + " " + currency.toUpperCase() + "</font>");
                  log("<font style=\"color:green;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                  stopp();
                  return;
                }
                if (profitTotal >= profitStop) {
                  log("<font style=\"color:green;font-size:15px;\">Stop On Profit: " + profitTotal + " " + currency.toUpperCase() + "</font>");
                  log("<font style=\"color:green;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                  stopp();
                  return;
                }
              } else {
                bet = bet + bet * increaseLose / 100;
                payout = payoutBase;
                if (document.getElementById("payoutListActive").checked == true) {
                  payoutListCur++;
                  if (payoutListMas[payoutListCur] == undefined) {
                    payoutListCur--;
                  }
                  payout = payoutListMas[payoutListCur];
                }
                colorChart = "red";
                profitTotal -= Number(prevBet);
                updateChart(bets, profitTotal, colorChart);
                $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                entrysEntrysCur++;
                if (entrysEntrysCur >= entrysEntrys) {
                  entrysEntrysTotal++;
                  workBet = bet;
                  firstMartinPat = false;
                  firstMartin = 0;
                  pat = [];
                  pat_result_id = 0;
                  pat_result = "";
                  patResult = [];
                  runPattern = false;
                  preStreakCur = 0;
                  preStreakMultiCur = 0;
                  preStreakCheck = false;
                  preStreakCheckFirst = false;
                  console.log("Time ...");
                  console.log("==========");
                  log("<font style=\"color:white;font-size:15px;\">Time ...</font>");
                  log("<font style=\"color:white;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  run = false;
                  timeTimeCur = 0;
                  clearInterval(waitBetTime);
                  waitBetTime = setInterval(function () {
                    timeTimeCur++;
                    if (timeTimeCur >= timeTime) {
                      clearInterval(waitBetTime);
                      run = true;
                      startScoket();
                    }
                  }, 60000);
                }
                if (entrysEntrysTotal >= 1000000000) {
                  log("<font style=\"color:green;font-size:15px;\">Entries Total = 4. Stop</font>");
                  log("<font style=\"color:green;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                  stopp();
                  return;
                }
              }
            }
            if (llast_balance - balance >= stopLoss) {
              log("<font style=\"color:red;font-size:15px;\">Stop On Loss: " + (llast_balance - balance) + " " + currency.toUpperCase() + "</font>");
              log("<font style=\"color:red;font-size:15px;\">==========</font>");
              $("#log").stop().animate({
                scrollTop: $("#log")[0].scrollHeight
              });
              $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
              stopp();
              return;
            }
            if (bet > balance) {
              log("<font style=\"color:red;font-size:15px;\">Insufficient funds</font>");
              log("<font style=\"color:red;font-size:15px;\">==========</font>");
              $("#log").stop().animate({
                scrollTop: $("#log")[0].scrollHeight
              });
              $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
              stopp();
              return;
            }
            if (firstMartinPat) {
              goRun = true;
              checkBet = true;
            }
          });
        }
      } else {
        if (_0xa4890d < payout) {
          streakBelowCur++;
          preStreakCur++;
        } else {
          streakBelowCur = 0;
          preStreakCur = 0;
        }
        if (_0xa4890d < payoutBase) {
          preStreakMultiCur++;
        } else {
          preStreakMultiCur = 0;
        }
        if (preStreakMultiCur >= preStreak) {
          preStreakCheck = true;
        }
        function _0x180c74() {
          if (preStreakCheck) {
            var _0x13e67d = 0;
            var _0x492f7d = [];
            var _0x315e4a = [];
            var _0x262a1f = false;
            var _0x209f04 = false;
            while (_0x209f04 == false) {
              var _0x1c6cb6 = 0;
              for (var _0x26f0ef = 0; _0x26f0ef < pat.length; _0x26f0ef++) {
                if (pat[_0x26f0ef] >= payout) {
                  _0x1c6cb6++;
                }
              }
              if (_0x1c6cb6 > winsWins) {
                pat.shift();
              }
              if (_0x1c6cb6 <= winsWins) {
                _0x209f04 = true;
              }
            }
            if (winsWins > 2) {
              if (pat[pat.length - 1] >= payout) {
                for (var _0x26f0ef = 0; _0x26f0ef < pat.length; _0x26f0ef++) {
                  if (pat[_0x26f0ef] >= payout) {
                    _0x13e67d++;
                    _0x492f7d.push(_0x26f0ef);
                  }
                }
                if (_0x13e67d == winsWins) {
                  for (var _0x53dbc3 = 0; _0x53dbc3 < _0x492f7d.length - 1; _0x53dbc3++) {
                    var _0x5284e9 = _0x492f7d[_0x53dbc3 + 1] - _0x492f7d[_0x53dbc3];
                    _0x315e4a.push(_0x5284e9);
                  }
                  _0x262a1f = true;
                  for (var _0x26f0ef = 0; _0x26f0ef < _0x315e4a.length - 1; _0x26f0ef++) {
                    if (_0x315e4a[_0x26f0ef] == _0x315e4a[_0x26f0ef + 1]) {} else {
                      _0x262a1f = false;
                    }
                  }
                }
              }
              if (_0x262a1f && _0x315e4a[0] <= intervalInterval) {
                runPattern = true;
              }
            }
            if (winsWins == 2) {
              if (pat[pat.length - 1] >= payout) {
                for (var _0x26f0ef = 0; _0x26f0ef < pat.length; _0x26f0ef++) {
                  if (pat[_0x26f0ef] >= payout) {
                    _0x13e67d++;
                    _0x492f7d.push(_0x26f0ef);
                  }
                  if (_0x13e67d == winsWins) {
                    for (var _0x53dbc3 = 0; _0x53dbc3 < _0x492f7d.length - 1; _0x53dbc3++) {
                      var _0x5284e9 = _0x492f7d[_0x53dbc3 + 1] - _0x492f7d[_0x53dbc3];
                      _0x315e4a.push(_0x5284e9);
                    }
                  }
                }
              }
              if (_0x315e4a[0] <= intervalInterval) {
                runPattern = true;
              }
            }
            if (winsWins == 1) {
              for (var _0x26f0ef = 0; _0x26f0ef < pat.length; _0x26f0ef++) {
                if (pat[_0x26f0ef] >= payout) {
                  runPattern = true;
                }
              }
            }
            if (winsWins <= 0) {
              runPattern = true;
            }
          }
        }
        if (streakBelowCur >= maxstreakBelow) {
          maxstreakBelow = streakBelowCur;
        }
        runPattern = true;
        if (preStreakCheck && runPattern) {
          firstMartinPat = true;
        } else {}
        if (Number(_0xa4890d) >= payout) {
          pat_result_id++;
          patResult.push("<span id=\"_patResult" + pat_result_id + "\" style=\"color:white;font-size:15px;font-weight:bold;background-color:green;padding:2px;margin-left:2px;border:1px solid white;border-radius:5px;\">" + Number(toFixedNo(Number(_0xa4890d), 2)).toFixed(2) + "</span>");
        } else {
          pat_result_id++;
          patResult.push("<span id=\"_patResult" + pat_result_id + "\" style=\"color:white;font-size:15px;font-weight:bold;background-color:transparent;padding:2px;margin-left:2px;border:1px solid white;border-radius:5px;\">" + Number(toFixedNo(Number(_0xa4890d), 2)).toFixed(2) + "</span>");
        }
        var _0xe5819b = [];
        for (var _0xa77291 = 0; _0xa77291 < patResult.length; _0xa77291++) {
          _0xe5819b.push(patResult[_0xa77291]);
        }
        _0xe5819b = _0xe5819b.reverse();
        $("#logResult").html(_0xe5819b);
        var _0x1dd211 = [];
        for (var _0xa77291 = 0; _0xa77291 < pat.length; _0xa77291++) {
          if (pat[_0xa77291] >= payout) {
            _0x1dd211.push("<id=\"_pat" + _0xa77291 + "\" style=\"color:green;\">" + Number(toFixedNo(Number(pat[_0xa77291]), 2)).toFixed(2));
          } else {
            _0x1dd211.push("<id=\"_pat" + _0xa77291 + "\" style=\"color:white;\">" + Number(toFixedNo(Number(pat[_0xa77291]), 2)).toFixed(2));
          }
        }
        console.log("%c Result: ", "color:white; font-size:100%");
        console.log(pat);
        console.log("==========");
        log("<font style=\"color:white;font-size:15px;\">Result: </font>");
        log("<font style=\"font-size:15px;\">" + _0x1dd211 + "</font>");
        log("<font style=\"color:white;font-size:15px;\">==========</font>");
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
        if (firstMartinPat == true) {
          if (firstMartin == 0) {
            console.log("%c Pattern Success. Placing bet ...", "color:green; font-size:150%");
            log("<font style=\"color:green;font-size:15px;\">Pattern Success. Placing bet ...</font>");
            log("<font style=\"color:green;font-size:15px;\">==========</font>");
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
          }
          getBalance(function () {
            if (balance >= lllastBalance) {
              lllastBalance = balance;
            }
            if (lllastBalance - balance >= maxLose) {
              maxLose = lllastBalance - balance;
            }
            if (balance >= llast_balance) {
              llast_balance = balance;
            }
            $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
            errTrue = false;
            if (err == false) {
              if (firstMartin == 0) {
                bet = basebet;
                if (entrysEntrysTotal > 0) {
                  bet = workBet;
                }
                firstMartin = 1;
                entrysEntrysCur = 0;
                payout = payoutBase;
                if (document.getElementById("payoutListActive").checked == true) {
                  payoutListCur = 0;
                  if (payoutListMas[payoutListCur] == undefined) {
                    payoutListCur = 0;
                  }
                  payout = payoutListMas[payoutListCur];
                }
              } else if (win) {
                entrysEntrysCur = 0;
                entrysEntrysTotal = 0;
                winsWinsCur = 0;
                basebet = balance * balancePerc / 100;
                if (basebet < 0) {
                  basebet = 0;
                }
                bet = basebet;
                workBet = basebet;
                payout = payoutBase;
                if (document.getElementById("payoutListActive").checked == true) {
                  payoutListCur = 0;
                  if (payoutListMas[payoutListCur] == undefined) {
                    payoutListCur = 0;
                  }
                  payout = payoutListMas[payoutListCur];
                }
                if (balance >= llast_balance) {
                  firstMartinPat = false;
                  firstMartin = 0;
                  pat = [];
                  pat_result_id = 0;
                  pat_result = "";
                  patResult = [];
                  runPattern = false;
                  preStreakCur = 0;
                  preStreakMultiCur = 0;
                  preStreakCheck = false;
                  preStreakCheckFirst = false;
                }
                if (balance > balanceVault) {
                  firstMartinPat = false;
                  firstMartin = 0;
                  pat = [];
                  pat_result_id = 0;
                  pat_result = "";
                  patResult = [];
                  runPattern = false;
                  preStreakCur = 0;
                  preStreakMultiCur = 0;
                  preStreakCheck = false;
                  preStreakCheckFirst = false;
                  amountVault = balance - balanceVault;
                  vault(amountVault, function () {});
                }
                streakBelowCur = 0;
                colorChart = "green";
                profitTotal += Number(prevBet) * Number(prevPayout) - Number(prevBet);
                updateChart(bets, profitTotal, colorChart);
                $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                if (stopWinCheck) {
                  log("<font style=\"color:green;font-size:15px;\">Stop On Win: " + profitTotal + " " + currency.toUpperCase() + "</font>");
                  log("<font style=\"color:green;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                  stopp();
                  return;
                }
                if (profitTotal >= profitStop) {
                  log("<font style=\"color:green;font-size:15px;\">Stop On Profit: " + profitTotal + " " + currency.toUpperCase() + "</font>");
                  log("<font style=\"color:green;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                  stopp();
                  return;
                }
              } else {
                bet = bet + bet * increaseLose / 100;
                payout = payoutBase;
                if (document.getElementById("payoutListActive").checked == true) {
                  payoutListCur++;
                  if (payoutListMas[payoutListCur] == undefined) {
                    payoutListCur--;
                  }
                  payout = payoutListMas[payoutListCur];
                }
                colorChart = "red";
                profitTotal -= Number(prevBet);
                updateChart(bets, profitTotal, colorChart);
                $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                entrysEntrysCur++;
                if (entrysEntrysCur >= entrysEntrys) {
                  entrysEntrysTotal++;
                  workBet = bet;
                  firstMartinPat = false;
                  firstMartin = 0;
                  pat = [];
                  pat_result_id = 0;
                  pat_result = "";
                  patResult = [];
                  runPattern = false;
                  preStreakCur = 0;
                  preStreakMultiCur = 0;
                  preStreakCheck = false;
                  preStreakCheckFirst = false;
                  console.log("Time ...");
                  console.log("==========");
                  log("<font style=\"color:white;font-size:15px;\">Time ...</font>");
                  log("<font style=\"color:white;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  run = false;
                  timeTimeCur = 0;
                  clearInterval(waitBetTime);
                  waitBetTime = setInterval(function () {
                    timeTimeCur++;
                    if (timeTimeCur >= timeTime) {
                      clearInterval(waitBetTime);
                      run = true;
                      startScoket();
                    }
                  }, 60000);
                }
                if (entrysEntrysTotal >= 1000000000) {
                  log("<font style=\"color:green;font-size:15px;\">Entries Total = 4. Stop</font>");
                  log("<font style=\"color:green;font-size:15px;\">==========</font>");
                  $("#log").stop().animate({
                    scrollTop: $("#log")[0].scrollHeight
                  });
                  $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                  stopp();
                  return;
                }
              }
            }
            if (llast_balance - balance >= stopLoss) {
              log("<font style=\"color:red;font-size:15px;\">Stop On Loss: " + (llast_balance - balance) + " " + currency.toUpperCase() + "</font>");
              log("<font style=\"color:red;font-size:15px;\">==========</font>");
              $("#log").stop().animate({
                scrollTop: $("#log")[0].scrollHeight
              });
              $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
              stopp();
              return;
            }
            if (bet > balance) {
              log("<font style=\"color:red;font-size:15px;\">Insufficient funds</font>");
              log("<font style=\"color:red;font-size:15px;\">==========</font>");
              $("#log").stop().animate({
                scrollTop: $("#log")[0].scrollHeight
              });
              $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
              stopp();
              return;
            }
            if (firstMartinPat) {
              goRun = true;
              checkBet = true;
            }
          });
        }
      }
    }
    if (strategy == "streak") {
      if (_0xa4890d <= payout) {
        streakBelowCur++;
        preStreakCur++;
      } else {
        streakBelowCur = 0;
        preStreakCur = 0;
      }
      if (preStreakCur >= preStreak) {
        preStreakCheck = true;
        console.log("%c Pre Streak Below Success. Placing bet ...", "color:green; font-size:150%");
        log("<font style=\"color:green;font-size:15px;\">Pre Streak Below Success. Placing bet ...</font>");
        log("<font style=\"color:green;font-size:15px;\">==========</font>");
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
      }
      if (streakBelowCur >= maxstreakBelow) {
        maxstreakBelow = streakBelowCur;
      }
      if (streakBelowCur >= streakBelow && preStreakCheck || streakBelow == 0 && preStreakCheck) {
        firstMartinPat = true;
      } else {}
      console.log("%c Result: ", "color:white; font-size:100%");
      console.log(pat);
      console.log("==========");
      log("<font style=\"color:white;font-size:15px;\">Result: </font>");
      log("<font style=\"color:white;font-size:15px;\">" + pat + "</font>");
      log("<font style=\"color:white;font-size:15px;\">==========</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      if (firstMartinPat == true) {
        if (firstMartin == 0) {
          console.log("%c Target Streak Below Success. Placing bet ...", "color:green; font-size:150%");
          log("<font style=\"color:green;font-size:15px;\">Target Streak Below Success. Placing bet ...</font>");
          log("<font style=\"color:green;font-size:15px;\">==========</font>");
          $("#log").stop().animate({
            scrollTop: $("#log")[0].scrollHeight
          });
        }
        getBalance(function () {
          if (win) {
            win = true;
            profitTotal += Number(bet.toFixed(8)) * Number(payout.toFixed(2)) - Number(bet.toFixed(8));
          } else {
            win = false;
            profitTotal -= Number(bet.toFixed(8));
          }
          if (win) {
            colorChart = "green";
          } else {
            colorChart = "red";
          }
          if (balance >= lllastBalance) {
            lllastBalance = balance;
          }
          if (lllastBalance - balance >= maxLose) {
            maxLose = lllastBalance - balance;
          }
          $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
          errTrue = false;
          if (balance > balanceVault) {
            amountVault = balance - balanceVault;
            vault(amountVault, function () {});
          }
          if (profitTotal >= profitStop) {
            log("<font style=\"color:green;font-size:15px;\">Stop On Profit: " + profitTotal + " " + currency.toUpperCase() + "</font>");
            log("<font style=\"color:green;font-size:15px;\">==========</font>");
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
            $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
            stopp();
            return;
          }
          if (err == false) {
            if (firstMartin == 0) {
              bet = basebet;
              firstMartin = 1;
            } else if (win) {
              bet = basebet;
              firstMartinPat = false;
              firstMartin = 0;
              pat = [];
              streakBelowCur = 0;
              updateChart(bets, profitTotal, colorChart);
              if (stopWinCheck) {
                log("<font style=\"color:green;font-size:15px;\">Stop On Win: " + profitTotal + " " + currency.toUpperCase() + "</font>");
                log("<font style=\"color:green;font-size:15px;\">==========</font>");
                $("#log").stop().animate({
                  scrollTop: $("#log")[0].scrollHeight
                });
                $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
                stopp();
                return;
              }
            } else {
              bet = bet + bet * increaseLose / 100;
              updateChart(bets, profitTotal, colorChart);
            }
          }
          if (bet > balance) {
            log("<font style=\"color:red;font-size:15px;\">Insufficient funds</font>");
            log("<font style=\"color:red;font-size:15px;\">==========</font>");
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
            stopp();
            return;
          }
          if (firstMartinPat) {
            goRun = true;
            checkBet = true;
            if (run) {
              setTimeout(() => {
                startBet();
              }, 1000);
            }
          }
        });
      }
    }
    $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
    $("#log").stop().animate({
      scrollTop: $("#log")[0].scrollHeight
    });
  } else {}
}
function startBet() {
  if (run) {
    if (goBet) {
      if (goRun) {
        if (!conf.b) {
          return;
        }
        var _0x22a9b5;
        if (gamegame == "crash") {
          _0x22a9b5 = "{\"query\":\"mutation MultiplayerCrashBet($amount: Float!, $currency: CurrencyEnum!, $cashoutAt: Float!) {\\n  multiplayerCrashBet(amount: $amount, currency: $currency, cashoutAt: $cashoutAt) {\\n    ...MultiplayerCrashBet\\n    user {\\n      id\\n      activeCrashBet {\\n        ...MultiplayerCrashBet\\n      }\\n    }\\n  }\\n}\\n\\nfragment MultiplayerCrashBet on MultiplayerCrashBet {\\n  id\\n  user {\\n    id\\n    name\\n  }\\n  payoutMultiplier\\n  gameId\\n  amount\\n  payout\\n  currency\\n  result\\n  updatedAt\\n  cashoutAt\\n  btcAmount: amount(currency: btc)\\n}\\n\",\"variables\":{\"amount\":" + Number(bet.toFixed(8)) + ",\"currency\":\"" + currency + "\",\"cashoutAt\":" + Number(payout.toFixed(2)) + "}}";
        } else {
          _0x22a9b5 = "{\"query\":\"mutation MultiplayerSlideBet($amount: Float!, $currency: CurrencyEnum!, $cashoutAt: Float!, $identifier: String!) {\\n  multiplayerSlideBet(\\n    amount: $amount\\n    currency: $currency\\n    cashoutAt: $cashoutAt\\n    identifier: $identifier\\n  ) {\\n    __typename\\n    ...MultiplayerSlideBet\\n    user {\\n      id\\n      activeSlideBet {\\n        ...MultiplayerSlideBet\\n      }\\n    }\\n  }\\n}\\n\\nfragment MultiplayerSlideBet on MultiplayerSlideBet {\\n  id\\n  user {\\n    id\\n    name\\n    preferenceHideBets\\n  }\\n  payoutMultiplier\\n  gameId\\n  amount\\n  payout\\n  currency\\n  slideResult: result\\n  updatedAt\\n  cashoutAt\\n  btcAmount: amount(currency: btc)\\n  active\\n  createdAt\\n}\\n\",\"variables\":{\"amount\":" + Number(bet.toFixed(8)) + ",\"identifier\":\"" + randomString(21) + "\",\"currency\":\"" + currency + "\",\"cashoutAt\":" + Number(payout.toFixed(2)) + "}}";
        }
        fetch("https://" + mirror + "/_api/graphql", {
          headers: {
            "content-type": "application/json",
            "x-access-token": token
          },
          body: _0x22a9b5,
          method: "POST"
        }).then(_0x49562a => {
          return _0x49562a.json();
        }).then(_0x210aea => {
          if (_0x210aea.errors) {
            console.log("Bet Waiting ...");
            console.log("==========");
            log("<font style=\"color:white;font-size:15px;\">Bet Waiting ...</font>");
            log("<font style=\"color:white;font-size:15px;\">" + _0x210aea.errors[0].message + "</font>");
            log("<font style=\"color:white;font-size:15px;\">==========</font>");
            errTrue = false;
            err = true;
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
            if (run) {
              setTimeout(() => {
                startBet();
              }, 1000);
            }
          } else {
            err = false;
            prevBet = Number(bet.toFixed(8));
            prevPayout = Number(payout.toFixed(2));
            checkBet = false;
            errTrue = false;
            goRun = false;
            console.log("%c Bet = " + bet.toFixed(8), "color: green; font-size: 150%");
            console.log("%c Cashout At = " + payout.toFixed(2), "color: green; font-size: 150%");
            console.log("%c Bet Success", "color: green; font-size: x-large");
            log("<font style=\"color:green;font-size:15px;\">Bet = " + bet.toFixed(8) + " " + currency.toUpperCase() + "</font>");
            log("<font style=\"color:green;font-size:15px;\">Cashout At = " + payout.toFixed(2) + "</font>");
            log("<font style=\"color:green;font-size:15px;\">==========</font>");
            log("<font style=\"color:green;font-size:15px;\">Bet Success</font>");
            log("<font style=\"color:green;font-size:15px;\">==========</font>");
            $("#log").stop().animate({
              scrollTop: $("#log")[0].scrollHeight
            });
            checkBal = true;
            checkBall = true;
            firstMainBet = true;
            bets++;
            wagered += Number(bet.toFixed(8));
            if (Number(bet.toFixed(8)) >= maxBet) {
              maxBet = Number(bet.toFixed(8));
            }
          }
        }).catch(function (_0x58a9c8, _0x457e7e) {
          console.log("Place Bet Error: " + _0x58a9c8);
          log("<font style=\"color:red;font-size:15px;\">Place Bet Error: " + _0x58a9c8 + "</font>");
          log("<font style=\"color:red;font-size:15px;\">==========</font>");
          $("#log").stop().animate({
            scrollTop: $("#log")[0].scrollHeight
          });
          errTrue = true;
          _0x58a9c8 = true;
          if (run) {
            setTimeout(() => {
              startBet();
            }, 1000);
          }
        });
      }
    }
  }
}
function randomString(_0x1f6bc) {
  var _0x2561fc = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-";
  var _0x5f16f6 = "";
  for (var _0x2c2917 = _0x1f6bc; _0x2c2917 > 0; --_0x2c2917) {
    _0x5f16f6 += _0x2561fc[Math.floor(Math.random() * _0x2561fc.length)];
  }
  return _0x5f16f6;
}
function __toFixedNo(_0x49d7e9, _0xf5b322) {
  var _0x535185 = new RegExp("^-?\\d+(?:.\\d{0," + (_0xf5b322 || -1) + "})?");
  return _0x49d7e9.toString().match(_0x535185)[0];
}
function toFixedNo(_0x19f5d1, _0x3736d0) {
  var _0x3f6643 = Number(_0x19f5d1).noExponents();
  var _0x6bf29f = new RegExp("^-?\\d+(?:.\\d{0," + (_0x3736d0 || -1) + "})?");
  return _0x3f6643.toString().match(_0x6bf29f)[0];
}
Number.prototype.noExponents = function () {
  var _0xd46ad9 = String(this).split(/[eE]/);
  if (_0xd46ad9.length == 1) {
    return _0xd46ad9[0];
  }
  var _0x46b968 = "";
  var _0x598bb2 = this < 0 ? "-" : "";
  var _0x1dcbde = _0xd46ad9[0].replace(".", "");
  var _0x457d65 = Number(_0xd46ad9[1]) + 1;
  if (_0x457d65 < 0) {
    _0x46b968 = _0x598bb2 + "0.";
    while (_0x457d65++) {
      _0x46b968 += "0";
    }
    return _0x46b968 + _0x1dcbde.replace(/^\-/, "");
  }
  _0x457d65 -= _0x1dcbde.length;
  while (_0x457d65--) {
    _0x46b968 += "0";
  }
  return _0x1dcbde + _0x46b968;
};
function getBalance(_0x4b8d81) {
  function _0xd41ed() {
    var _0x47e9f7 = {
      "content-type": "application/json",
      "x-access-token": token
    };
    fetch("https://" + mirror + "/_api/graphql", {
      headers: _0x47e9f7,
      body: "{\"query\":\"query UserBalances {\\n  user {\\n    id\\n    balances {\\n      available {\\n        amount\\n        currency\\n        __typename\\n      }\\n      vault {\\n        amount\\n        currency\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"operationName\":\"UserBalances\"}",
      method: "POST"
    }).then(_0x1378e8 => {
      return _0x1378e8.json();
    }).then(_0x4b57a7 => {
      if (_0x4b57a7.errors) {
        log("<font style=\"color:red;font-size:15px;\">Get Balance Error: " + _0x4b57a7 + " " + _0x4b57a7.errors + "</font>");
        log("<font style=\"color:red;font-size:15px;\">==========</font>");
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
        errTrue = true;
        if (run || finishBetTrue) {
          setTimeout(() => {
            _0xd41ed();
          }, 1000);
        }
      } else {
        var _0x5f5bfb = _0x4b57a7.data.user.balances.find(_0x438a67 => _0x438a67.available.currency == currency);
        balance = Number(_0x5f5bfb.available.amount);
        _0x4b8d81();
      }
    }).catch(function (_0x597f29, _0x115f43) {
      console.log("Get Balance Error: " + _0x597f29);
      log("<font style=\"color:red;font-size:15px;\">Get Balance Error: " + _0x597f29 + "</font>");
      log("<font style=\"color:red;font-size:15px;\">==========</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      errTrue = true;
      if (run || finishBetTrue) {
        setTimeout(() => {
          _0xd41ed();
        }, 1000);
      }
    });
  }
  _0xd41ed();
}
function getBalance1() {
  fetch("https://" + mirror + "/_api/graphql", {
    headers: {
      "content-type": "application/json",
      "x-access-token": token
    },
    body: "{\"query\":\"query UserBalances {\\n  user {\\n    id\\n    balances {\\n      available {\\n        amount\\n        currency\\n        __typename\\n      }\\n      vault {\\n        amount\\n        currency\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"operationName\":\"UserBalances\"}",
    method: "POST"
  }).then(_0x26f9e5 => {
    return _0x26f9e5.json();
  }).then(_0x546b9c => {
    if (_0x546b9c.errors) {
      log("<font style=\"color:red;font-size:15px;\">Get Balance Error: " + _0x546b9c + " " + _0x546b9c.errors + "</font>");
      log("<font style=\"color:red;font-size:15px;\">==========</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      errTrue = true;
      if (run) {
        setTimeout(() => {
          getBalance1();
        }, 1000);
      }
    } else {
      var _0x3b7711 = _0x546b9c.data.user.balances.find(_0x5e2065 => _0x5e2065.available.currency == currency);
      balance = Number(_0x3b7711.available.amount);
      var _0x45c70d = balance - lastBalance;
      lastBalance = balance;
      var _0x4aa795;
      if (_0x45c70d >= 0) {
        _0x4aa795 = true;
      } else {
        _0x4aa795 = false;
      }
      profitTotal = balance - startBalance;
      if (balance >= lllastBalance) {
        lllastBalance = balance;
      }
      if (lllastBalance - balance >= maxLose) {
        maxLose = lllastBalance - balance;
      }
      $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
      errTrue = false;
      if (profitTotal >= profitStop) {
        var _0x247a86 = "";
        if (_0x4aa795) {
          _0x247a86 = "green";
        } else {
          _0x247a86 = "red";
        }
        if (firstMainBet) {
          updateChart(bets, profitTotal, _0x247a86);
        }
        log("<font style=\"color:green;font-size:15px;\">Stop On Profit: " + profitTotal + " " + currency.toUpperCase() + "</font>");
        log("<font style=\"color:green;font-size:15px;\">==========</font>");
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
        $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
        stopp();
        return;
      }
    }
  }).catch(function (_0x4d2cb6, _0x35844b) {
    console.log("Get Balance Error: " + _0x4d2cb6);
    log("<font style=\"color:red;font-size:15px;\">Get Balance Error: " + _0x4d2cb6 + "</font>");
    log("<font style=\"color:red;font-size:15px;\">==========</font>");
    $("#log").stop().animate({
      scrollTop: $("#log")[0].scrollHeight
    });
    errTrue = true;
    if (run) {
      setTimeout(() => {
        getBalance1();
      }, 1000);
    }
  });
}
function getBalanceStart() {
  fetch("https://" + mirror + "/_api/graphql", {
    headers: {
      "content-type": "application/json",
      "x-access-token": token
    },
    body: "{\"query\":\"query UserBalances {\\n  user {\\n    id\\n    balances {\\n      available {\\n        amount\\n        currency\\n        __typename\\n      }\\n      vault {\\n        amount\\n        currency\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"operationName\":\"UserBalances\"}",
    method: "POST"
  }).then(_0x30d205 => {
    return _0x30d205.json();
  }).then(_0x39d7a1 => {
    if (_0x39d7a1.errors) {
      log("<font style=\"color:red;font-size:15px;\">Get Balance Error: " + _0x39d7a1 + " " + _0x39d7a1.errors + "</font>");
      log("<font style=\"color:red;font-size:15px;\">==========</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      errTrue = true;
      stopp();
    } else {
      var _0x54b266 = _0x39d7a1.data.user.balances.find(_0x47d21b => _0x47d21b.available.currency == currency);
      balance = Number(_0x54b266.available.amount);
      if (checkBalance == true) {
        startBalance = balance;
        lastBalance = balance;
        llastBalance = balance;
        lllastBalance = balance;
        last_balance = balance;
        llast_balance = balance;
        checkBalance = false;
      }
      profitTotal = balance - startBalance;
      log("<font style=\"color:green;font-size:15px;\">Balance: " + balance + " " + currency.toUpperCase() + "</font>");
      log("<font style=\"color:green;font-size:15px;\">==========</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      errTrue = false;
      $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + Number(toFixedNo(balance, 8)) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
      start();
    }
  }).catch(function (_0x13d8cd, _0xbe18df) {
    console.log("Get Balance Error: " + _0x13d8cd);
    log("<font style=\"color:red;font-size:15px;\">Get Balance Error: " + _0x13d8cd + "</font>");
    log("<font style=\"color:red;font-size:15px;\">==========</font>");
    $("#log").stop().animate({
      scrollTop: $("#log")[0].scrollHeight
    });
    errTrue = true;
    if (run) {
      setTimeout(() => {
        getBalanceStart();
      }, 1000);
    }
  });
}
function startScoket() {
  if (run && socketConnect == false) {
    let _0x442486 = new WebSocket("wss://" + mirror + "/_api/websockets", "graphql-transport-ws");
    _0x442486.onopen = () => {
      socketConnect = true;
      var _0x24f87b = {
        type: "connection_init",
        payload: {}
      };
      _0x24f87b.payload.accessToken = token;
      _0x24f87b.payload.language = "en";
      _0x24f87b.payload.lockdownToken = "s5MNWtjTM5TvCMkAzxov";
      _0x442486.send(JSON.stringify(_0x24f87b));
    };
    _0x442486.onerror = _0x51ae49 => {
      socketConnect = false;
      console.error("WebSocket error: ", _0x51ae49);
      console.log("WebSocket error: ", _0x51ae49);
      log("WebSocket error: " + _0x51ae49);
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      setTimeout(() => {
        startScoket();
      }, 1000);
    };
    _0x442486.onclose = _0x4737bd => {
      socketConnect = false;
      console.log("WebSocket connection closed: ", _0x4737bd.code, _0x4737bd.reason);
      log("WebSocket connection closed: " + _0x4737bd.code + _0x4737bd.reason);
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      setTimeout(() => {
        startScoket();
      }, 1000);
    };
    _0x442486.onmessage = _0x56e4a4 => {
      const _0x4b2ac6 = JSON.parse(_0x56e4a4.data);
      if (_0x4b2ac6.hasOwnProperty("payload")) {
        if (_0x4b2ac6.payload.data.hasOwnProperty("availableBalances")) {}
        if (gamegame == "crash") {
          if (_0x4b2ac6.payload.data.hasOwnProperty("crash")) {
            if (_0x4b2ac6.payload.data.crash.event.status == "in_progress" || _0x4b2ac6.payload.data.crash.event.status == "crash") {}
            if (_0x4b2ac6.payload.data.crash.event.hasOwnProperty("nextRoundIn") && _0x4b2ac6.payload.data.crash.event.nextRoundIn != null) {
              if (_0x4b2ac6.payload.data.crash.event.nextRoundIn > 1599) {} else {}
              if (_0x4b2ac6.payload.data.crash.event.nextRoundIn === null) {}
            }
            if (run == true) {
              if (_0x4b2ac6.payload.data.crash.event.status == "in_progress") {}
              if (_0x4b2ac6.payload.data.crash.event.status == "starting" && bet_placed == false) {
                bet_placed = true;
                if (run && goRun) {
                  startBet();
                }
              }
              if (_0x4b2ac6.payload.data.crash.event.status == "start") {
                bet_placed = false;
                bet_found = false;
              }
              if (_0x4b2ac6.payload.data.crash.event.status == "crash") {
                if (bet_found === false) {
                  bet_found = true;
                  crashpoint1 = _0x4b2ac6.payload.data.crash.event.multiplier;
                  doBet();
                }
              }
            } else {}
            if (_0x4b2ac6.payload.data.crash.event.status == "crash") {}
          }
        } else if (_0x4b2ac6.payload.data.hasOwnProperty("slide")) {
          if (_0x4b2ac6.payload.data.slide.event.status == "in_progress" || _0x4b2ac6.payload.data.slide.event.status == "result") {}
          if (_0x4b2ac6.payload.data.slide.event.hasOwnProperty("nextRoundIn") && _0x4b2ac6.payload.data.slide.event.nextRoundIn != null) {
            if (_0x4b2ac6.payload.data.slide.event.nextRoundIn > 1599) {} else {}
            if (_0x4b2ac6.payload.data.slide.event.nextRoundIn === null) {}
          }
          if (run == true) {
            if (_0x4b2ac6.payload.data.slide.event.status == "in_progress") {}
            if (_0x4b2ac6.payload.data.slide.event.status == "starting" && bet_placed == false) {
              bet_placed = true;
              if (run && goRun) {
                startBet();
              }
            }
            if (_0x4b2ac6.payload.data.slide.event.status == "pending") {
              bet_placed = false;
              bet_found = false;
            }
            if (_0x4b2ac6.payload.data.slide.event.status == "result") {
              if (bet_found === false) {
                bet_found = true;
                crashpoint1 = _0x4b2ac6.payload.data.slide.event.multiplier;
                doBet();
              }
            }
          } else {}
          if (_0x4b2ac6.payload.data.slide.event.status == "result") {}
        }
      }
      if (_0x56e4a4.data.includes("connection_ack")) {
        var _0x2fa38d = {
          id: "e0f09352-0cc1-4485-8acf-ca53caccb5a8",
          type: "subscribe",
          payload: {}
        };
        _0x2fa38d.payload.query = "subscription AvailableBalances {\n  availableBalances {\n    amount\n    identifier\n    balance {\n      amount\n      currency\n    }\n  }\n}\n";
        _0x442486.send(JSON.stringify(_0x2fa38d));
        setTimeout(() => {
          if (gamegame == "crash") {
            var _0x55c608 = {
              id: "3c099e10-dd7d-4a93-a86c-f2fe0082a6f3",
              type: "subscribe",
              payload: {}
            };
            _0x55c608.payload.query = "subscription Crash {\n  crash {\n    event {\n      ... on MultiplayerCrash {\n        ...MultiplayerCrash\n      }\n      ... on MultiplayerCrashBet {\n        ...MultiplayerCrashBet\n      }\n      __typename\n    }\n  }\n}\n\nfragment MultiplayerCrash on MultiplayerCrash {\n  id\n  status\n  multiplier\n  startTime\n  nextRoundIn\n  crashpoint\n  elapsed\n  timestamp\n  cashedIn {\n    id\n    user {\n      id\n      name\n    }\n    payoutMultiplier\n    gameId\n    amount\n    payout\n    currency\n    result\n    updatedAt\n    cashoutAt\n    btcAmount: amount(currency: btc)\n  }\n  cashedOut {\n    id\n    user {\n      id\n      name\n    }\n    payoutMultiplier\n    gameId\n    amount\n    payout\n    currency\n    result\n    updatedAt\n    cashoutAt\n    btcAmount: amount(currency: btc)\n  }\n}\n\nfragment MultiplayerCrashBet on MultiplayerCrashBet {\n  id\n  user {\n    id\n    name\n  }\n  payoutMultiplier\n  gameId\n  amount\n  payout\n  currency\n  result\n  updatedAt\n  cashoutAt\n  btcAmount: amount(currency: btc)\n}\n";
            _0x442486.send(JSON.stringify(_0x55c608));
          } else {
            var _0x294983 = {
              id: "d0fc7aca-ccc7-4c25-9855-8f930966c4c1",
              type: "subscribe",
              payload: {}
            };
            _0x294983.payload.query = "subscription slide {\n  slide {\n    event {\n      __typename\n      ... on MultiplayerSlide {\n        ...MultiplayerSlide\n      }\n      ... on MultiplayerSlideBet {\n        id\n        user {\n          id\n          name\n        }\n        payoutMultiplier\n        gameId\n        amount\n        payout\n        currency\n        result\n        updatedAt\n        cashoutAt\n        btcAmount: amount(currency: btc)\n      }\n    }\n  }\n}\n\nfragment MultiplayerSlide on MultiplayerSlide {\n  __typename\n  id\n  status\n  multiplier\n  startTime\n  nextRoundIn\n  elapsed\n  timestamp\n  cashedIn {\n    id\n    user {\n      id\n      name\n      preferenceHideBets\n    }\n    payoutMultiplier\n    gameId\n    amount\n    payout\n    currency\n    result\n    updatedAt\n    cashoutAt\n    btcAmount: amount(currency: btc)\n  }\n  numbers\n}\n";
            _0x442486.send(JSON.stringify(_0x294983));
          }
        }, "1000");
      }
      ;
    };
  }
}
function list(_0xcea4d0) {
  if (_0xcea4d0.data == null) {
    log("<font style=\"color:red;font-size:15px;\">Get History Error: " + _0xcea4d0.errors[0].message + "</font>");
    log("<font style=\"color:red;font-size:15px;\">==========</font>");
    $("#log").stop().animate({
      scrollTop: $("#log")[0].scrollHeight
    });
  } else {
    if (gamegame == "crash") {
      if (lastHash.indexOf(_0xcea4d0.data.crashGameList[0].hash.hash) == -1) {
        lastHash.pop();
        lastHash.push(_0xcea4d0.data.crashGameList[0].hash.hash);
        crashPoint.pop();
        crashPoint.push(_0xcea4d0.data.crashGameList[0].crashpoint);
        console.log(crashPoint);
        console.log(lastHash);
      }
    } else if (lastHash.indexOf(_0xcea4d0.data.slideGameList[0].hash.hash) == -1) {
      lastHash.pop();
      lastHash.push(_0xcea4d0.data.slideGameList[0].hash.hash);
      crashPoint.pop();
      crashPoint.push(_0xcea4d0.data.slideGameList[0].multiplier);
      console.log(crashPoint);
      console.log(lastHash);
    }
    doBet();
  }
  if (change_mirror_true) {
    mirrorCur++;
    if (mirrorCur >= 600) {
      mirrorCur = 0;
      change_mirror_cur++;
      if (change_mirror[change_mirror_cur] == undefined) {
        change_mirror_cur = 0;
      }
      mirror = change_mirror[change_mirror_cur];
      console.log("New site mirror: " + mirror);
      log("<font style=\"color:white;font-size:15px;\">New site mirror: " + mirror + "</font>");
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
    }
  }
  if (run) {
    setTimeout(function () {
      historybet();
    }, 1000);
  }
}
function historybet() {
  if (!conf.b) {
    return;
  }
  var _0x14e2b2;
  if (gamegame == "crash") {
    _0x14e2b2 = {
      operationName: "CrashGameListHistory",
      variables: {},
      query: "query CrashGameListHistory($limit: Int, $offset: Int) {\n  crashGameList(limit: $limit, offset: $offset) {\n    id\n    startTime\n    crashpoint\n    hash {\n      id\n      hash\n      __typename\n    }\n    __typename\n  }\n}\n"
    };
  } else {
    _0x14e2b2 = {
      operationName: "SlideGameListHistory",
      variables: {},
      query: "query SlideGameListHistory($limit: Int, $offset: Int) {\n  slideGameList(limit: $limit, offset: $offset) {\n    id\n    multiplier\n    startTime\n    hash {\n      hash\n      __typename\n    }\n    __typename\n  }\n}\n"
    };
  }
  fetch("https://" + mirror + "/_api/graphql", {
    method: "post",
    body: JSON.stringify(_0x14e2b2),
    headers: {
      "Content-Type": "application/json",
      "x-access-token": token
    }
  }).then(_0x3d542d => _0x3d542d.json()).then(_0x5405e1 => list(_0x5405e1)).catch(function (_0x1a9d08, _0x2baea5) {
    console.log("Get History Error: " + _0x1a9d08);
    log("<font style=\"color:red;font-size:15px;\">Get History Error: " + _0x1a9d08 + "</font>");
    log("<font style=\"color:red;font-size:15px;\">==========</font>");
    $("#log").stop().animate({
      scrollTop: $("#log")[0].scrollHeight
    });
    errTrue = true;
    if (run) {
      setTimeout(() => {
        historybet();
      }, 1000);
    }
  });
}
function vault(_0x4f9b8e, _0x52a5fc) {
  function _0x48a6c6() {
    var _0x47e703 = String(currency).toLowerCase();
    var _0x1e4d6f = Number(_0x4f9b8e);
    var _0x3382a8 = {
      "content-type": "application/json",
      "x-access-token": token
    };
    fetch("https://" + mirror + "/_api/graphql", {
      headers: _0x3382a8,
      body: "{\"query\":\"mutation CreateVaultDeposit($currency: CurrencyEnum!, $amount: Float!) {\\n  createVaultDeposit(currency: $currency, amount: $amount) {\\n    id\\n    amount\\n    currency\\n    user {\\n      id\\n      balances {\\n        available {\\n          amount\\n          currency\\n          __typename\\n        }\\n        vault {\\n          amount\\n          currency\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"operationName\":\"CreateVaultDeposit\",\"variables\":{\"currency\":\"" + _0x47e703 + "\",\"amount\":" + _0x1e4d6f + "}}",
      method: "POST"
    }).then(_0x4ead89 => {
      return _0x4ead89.json();
    }).then(_0x584a87 => {
      console.log(_0x584a87);
      if (_0x584a87.data) {
        var _0x202489 = _0x584a87.data.createVaultDeposit.user.balances.find(_0x1ca1cf => _0x1ca1cf.available.currency == currency);
        balance = Number(_0x202489.available.amount);
        lllastBalance = balance;
        llast_balance = balance;
        $("#statistic").html("<span style=\"float:left;\">Coin = " + currency.toLowerCase() + "</span> <span style=\"float:right;\">Game № = " + gameNumber + "</span> <br>   <span style=\"float:left;\">Balance = " + toFixedNo(Number(balance), 8) + "</span> <span style=\"float:right;\">Max Streak = " + maxstreakBelow + "</span> <br>   <span style=\"float:left;\">Profit = " + profitTotal.toFixed(8) + "</span> <span style=\"float:right;\">Max Bet Amount = " + maxBet.toFixed(8) + "</span> <br>   <span style=\"float:left;\">Wagered = " + wagered.toFixed(8) + "</span> <span style=\"float:right;\">Max Lose Amount = " + maxLose.toFixed(8) + "</span>");
        log("Transferred to vault: " + _0x584a87.data.createVaultDeposit.amount + " " + _0x584a87.data.createVaultDeposit.currency);
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
      }
      if (_0x584a87.data == null && _0x584a87.errors != null) {
        console.log(_0x584a87);
        log("Transferred to vault Error: " + _0x584a87.errors[0].message);
        $("#log").stop().animate({
          scrollTop: $("#log")[0].scrollHeight
        });
      }
      _0x52a5fc();
    }).catch(function (_0x165350) {
      console.log("Transferred to vault Error: " + _0x165350);
      log("Transferred to vault Error: " + _0x165350);
      $("#log").stop().animate({
        scrollTop: $("#log")[0].scrollHeight
      });
      if (run) {
        setTimeout(() => {
          _0x48a6c6();
        }, 1000);
      }
    });
  }
  _0x48a6c6();
}
debugger;
